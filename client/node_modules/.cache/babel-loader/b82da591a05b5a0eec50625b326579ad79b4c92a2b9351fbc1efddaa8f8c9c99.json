{"ast":null,"code":"const ASYMMETRIC_KEY_DETAILS_SUPPORTED = require('./asymmetricKeyDetailsSupported');\nconst RSA_PSS_KEY_DETAILS_SUPPORTED = require('./rsaPssKeyDetailsSupported');\nconst allowedAlgorithmsForKeys = {\n  'ec': ['ES256', 'ES384', 'ES512'],\n  'rsa': ['RS256', 'PS256', 'RS384', 'PS384', 'RS512', 'PS512'],\n  'rsa-pss': ['PS256', 'PS384', 'PS512']\n};\nconst allowedCurves = {\n  ES256: 'prime256v1',\n  ES384: 'secp384r1',\n  ES512: 'secp521r1'\n};\nmodule.exports = function (algorithm, key) {\n  if (!algorithm || !key) return;\n  const keyType = key.asymmetricKeyType;\n  if (!keyType) return;\n  const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];\n  if (!allowedAlgorithms) {\n    throw new Error(\"Unknown key type \\\"\".concat(keyType, \"\\\".\"));\n  }\n  if (!allowedAlgorithms.includes(algorithm)) {\n    throw new Error(\"\\\"alg\\\" parameter for \\\"\".concat(keyType, \"\\\" key type must be one of: \").concat(allowedAlgorithms.join(', '), \".\"));\n  }\n\n  /*\r\n   * Ignore the next block from test coverage because it gets executed\r\n   * conditionally depending on the Node version. Not ignoring it would\r\n   * prevent us from reaching the target % of coverage for versions of\r\n   * Node under 15.7.0.\r\n   */\n  /* istanbul ignore next */\n  if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {\n    switch (keyType) {\n      case 'ec':\n        const keyCurve = key.asymmetricKeyDetails.namedCurve;\n        const allowedCurve = allowedCurves[algorithm];\n        if (keyCurve !== allowedCurve) {\n          throw new Error(\"\\\"alg\\\" parameter \\\"\".concat(algorithm, \"\\\" requires curve \\\"\").concat(allowedCurve, \"\\\".\"));\n        }\n        break;\n      case 'rsa-pss':\n        if (RSA_PSS_KEY_DETAILS_SUPPORTED) {\n          const length = parseInt(algorithm.slice(-3), 10);\n          const {\n            hashAlgorithm,\n            mgf1HashAlgorithm,\n            saltLength\n          } = key.asymmetricKeyDetails;\n          if (hashAlgorithm !== \"sha\".concat(length) || mgf1HashAlgorithm !== hashAlgorithm) {\n            throw new Error(\"Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of \\\"alg\\\" \".concat(algorithm, \".\"));\n          }\n          if (saltLength !== undefined && saltLength > length >> 3) {\n            throw new Error(\"Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of \\\"alg\\\" \".concat(algorithm, \".\"));\n          }\n        }\n        break;\n    }\n  }\n};","map":{"version":3,"names":["ASYMMETRIC_KEY_DETAILS_SUPPORTED","require","RSA_PSS_KEY_DETAILS_SUPPORTED","allowedAlgorithmsForKeys","allowedCurves","ES256","ES384","ES512","module","exports","algorithm","key","keyType","asymmetricKeyType","allowedAlgorithms","Error","concat","includes","join","keyCurve","asymmetricKeyDetails","namedCurve","allowedCurve","length","parseInt","slice","hashAlgorithm","mgf1HashAlgorithm","saltLength","undefined"],"sources":["C:/Users/azeve/OneDrive/Área de Trabalho/fullstack-app/client/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js"],"sourcesContent":["const ASYMMETRIC_KEY_DETAILS_SUPPORTED = require('./asymmetricKeyDetailsSupported');\r\nconst RSA_PSS_KEY_DETAILS_SUPPORTED = require('./rsaPssKeyDetailsSupported');\r\n\r\nconst allowedAlgorithmsForKeys = {\r\n  'ec': ['ES256', 'ES384', 'ES512'],\r\n  'rsa': ['RS256', 'PS256', 'RS384', 'PS384', 'RS512', 'PS512'],\r\n  'rsa-pss': ['PS256', 'PS384', 'PS512']\r\n};\r\n\r\nconst allowedCurves = {\r\n  ES256: 'prime256v1',\r\n  ES384: 'secp384r1',\r\n  ES512: 'secp521r1',\r\n};\r\n\r\nmodule.exports = function(algorithm, key) {\r\n  if (!algorithm || !key) return;\r\n\r\n  const keyType = key.asymmetricKeyType;\r\n  if (!keyType) return;\r\n\r\n  const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];\r\n\r\n  if (!allowedAlgorithms) {\r\n    throw new Error(`Unknown key type \"${keyType}\".`);\r\n  }\r\n\r\n  if (!allowedAlgorithms.includes(algorithm)) {\r\n    throw new Error(`\"alg\" parameter for \"${keyType}\" key type must be one of: ${allowedAlgorithms.join(', ')}.`)\r\n  }\r\n\r\n  /*\r\n   * Ignore the next block from test coverage because it gets executed\r\n   * conditionally depending on the Node version. Not ignoring it would\r\n   * prevent us from reaching the target % of coverage for versions of\r\n   * Node under 15.7.0.\r\n   */\r\n  /* istanbul ignore next */\r\n  if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {\r\n    switch (keyType) {\r\n    case 'ec':\r\n      const keyCurve = key.asymmetricKeyDetails.namedCurve;\r\n      const allowedCurve = allowedCurves[algorithm];\r\n\r\n      if (keyCurve !== allowedCurve) {\r\n        throw new Error(`\"alg\" parameter \"${algorithm}\" requires curve \"${allowedCurve}\".`);\r\n      }\r\n      break;\r\n\r\n    case 'rsa-pss':\r\n      if (RSA_PSS_KEY_DETAILS_SUPPORTED) {\r\n        const length = parseInt(algorithm.slice(-3), 10);\r\n        const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;\r\n\r\n        if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {\r\n          throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of \"alg\" ${algorithm}.`);\r\n        }\r\n\r\n        if (saltLength !== undefined && saltLength > length >> 3) {\r\n          throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of \"alg\" ${algorithm}.`)\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAMA,gCAAgC,GAAGC,OAAO,CAAC,iCAAiC,CAAC;AACnF,MAAMC,6BAA6B,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAE5E,MAAME,wBAAwB,GAAG;EAC/B,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACjC,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EAC7D,SAAS,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO;AACvC,CAAC;AAED,MAAMC,aAAa,GAAG;EACpBC,KAAK,EAAE,YAAY;EACnBC,KAAK,EAAE,WAAW;EAClBC,KAAK,EAAE;AACT,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG,UAASC,SAAS,EAAEC,GAAG,EAAE;EACxC,IAAI,CAACD,SAAS,IAAI,CAACC,GAAG,EAAE;EAExB,MAAMC,OAAO,GAAGD,GAAG,CAACE,iBAAiB;EACrC,IAAI,CAACD,OAAO,EAAE;EAEd,MAAME,iBAAiB,GAAGX,wBAAwB,CAACS,OAAO,CAAC;EAE3D,IAAI,CAACE,iBAAiB,EAAE;IACtB,MAAM,IAAIC,KAAK,uBAAAC,MAAA,CAAsBJ,OAAO,QAAI,CAAC;EACnD;EAEA,IAAI,CAACE,iBAAiB,CAACG,QAAQ,CAACP,SAAS,CAAC,EAAE;IAC1C,MAAM,IAAIK,KAAK,4BAAAC,MAAA,CAAyBJ,OAAO,kCAAAI,MAAA,CAA8BF,iBAAiB,CAACI,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC;EAC/G;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE;EACA,IAAIlB,gCAAgC,EAAE;IACpC,QAAQY,OAAO;MACf,KAAK,IAAI;QACP,MAAMO,QAAQ,GAAGR,GAAG,CAACS,oBAAoB,CAACC,UAAU;QACpD,MAAMC,YAAY,GAAGlB,aAAa,CAACM,SAAS,CAAC;QAE7C,IAAIS,QAAQ,KAAKG,YAAY,EAAE;UAC7B,MAAM,IAAIP,KAAK,wBAAAC,MAAA,CAAqBN,SAAS,0BAAAM,MAAA,CAAqBM,YAAY,QAAI,CAAC;QACrF;QACA;MAEF,KAAK,SAAS;QACZ,IAAIpB,6BAA6B,EAAE;UACjC,MAAMqB,MAAM,GAAGC,QAAQ,CAACd,SAAS,CAACe,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UAChD,MAAM;YAAEC,aAAa;YAAEC,iBAAiB;YAAEC;UAAW,CAAC,GAAGjB,GAAG,CAACS,oBAAoB;UAEjF,IAAIM,aAAa,WAAAV,MAAA,CAAWO,MAAM,CAAE,IAAII,iBAAiB,KAAKD,aAAa,EAAE;YAC3E,MAAM,IAAIX,KAAK,mGAAAC,MAAA,CAAiGN,SAAS,MAAG,CAAC;UAC/H;UAEA,IAAIkB,UAAU,KAAKC,SAAS,IAAID,UAAU,GAAGL,MAAM,IAAI,CAAC,EAAE;YACxD,MAAM,IAAIR,KAAK,+GAAAC,MAAA,CAA6GN,SAAS,MAAG,CAAC;UAC3I;QACF;QACA;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}